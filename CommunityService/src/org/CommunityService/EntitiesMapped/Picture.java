package org.CommunityService.EntitiesMapped;

// Generated Feb 22, 2014 8:45:42 PM by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;

import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.CascadeType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * Picture generated by hbm2java
 */
@Entity
@Table(name = "Picture", catalog = "volunteerMeData", uniqueConstraints = @UniqueConstraint(columnNames = "PictureLink"))
public class Picture implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 7758262430880599521L;
	private Integer pictureId;
	private String pictureLink;
	private Date uploadedOn;
	private String albumName;
	private String description;
	private Set<Group> groups = new HashSet<Group>(0);
	private Set<Volunteer> volunteers = new HashSet<Volunteer>(0);
	private Set<Organization> organizations = new HashSet<Organization>(0);
	private Set<Event> events = new HashSet<Event>(0);

	public Picture() {
	}

	public Picture(String pictureLink) {
		this.pictureLink = pictureLink;
	}

	public Picture(String pictureLink, Date uploadedOn, String albumName, String description, Set<Group> groups, Set<Volunteer> volunteers,
			Set<Organization> organizations, Set<Event> events) {
		this.pictureLink = pictureLink;
		this.uploadedOn = uploadedOn;
		this.albumName = albumName;
		this.description = description;
		this.groups = groups;
		this.volunteers = volunteers;
		this.organizations = organizations;
		this.events = events;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "PictureID", unique = true, nullable = false)
	public Integer getPictureId() {
		return this.pictureId;
	}

	public void setPictureId(Integer pictureId) {
		this.pictureId = pictureId;
	}

	@Column(name = "PictureLink", unique = true, nullable = false, length = 45)
	public String getPictureLink() {
		return this.pictureLink;
	}

	public void setPictureLink(String pictureLink) {
		this.pictureLink = pictureLink;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "UploadedOn", length = 19)
	public Date getUploadedOn() {
		return this.uploadedOn;
	}

	public void setUploadedOn(Date uploadedOn) {
		this.uploadedOn = uploadedOn;
	}

	@Column(name = "AlbumName", length = 45)
	public String getAlbumName() {
		return this.albumName;
	}

	public void setAlbumName(String albumName) {
		this.albumName = albumName;
	}

	@Column(name = "Description", length = 45)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@ManyToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
	@JoinTable(name = "Picture_Group", catalog = "volunteerMeData", joinColumns = { @JoinColumn(name = "PictureID", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "GroupID", nullable = false, updatable = false) })
	public Set<Group> getGroups() {
		return this.groups;
	}

	public void setGroups(Set<Group> groups) {
		this.groups = groups;
	}

	@ManyToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
	@JoinTable(name = "Picture_Volunteer", catalog = "volunteerMeData", joinColumns = { @JoinColumn(name = "PictureID", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "VolunteerID", nullable = false, updatable = false) })
	public Set<Volunteer> getVolunteers() {
		return this.volunteers;
	}

	public void setVolunteers(Set<Volunteer> volunteers) {
		this.volunteers = volunteers;
	}

	@ManyToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
	@JoinTable(name = "Picture_Organization", catalog = "volunteerMeData", joinColumns = { @JoinColumn(name = "PictureID", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "OrgID", nullable = false, updatable = false) })
	public Set<Organization> getOrganizations() {
		return this.organizations;
	}

	public void setOrganizations(Set<Organization> organizations) {
		this.organizations = organizations;
	}

	@ManyToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
	@JoinTable(name = "Picture_Event", catalog = "volunteerMeData", joinColumns = { @JoinColumn(name = "PictureID", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "EventID", nullable = false, updatable = false) })
	public Set<Event> getEvents() {
		return this.events;
	}

	public void setEvents(Set<Event> events) {
		this.events = events;
	}

}
