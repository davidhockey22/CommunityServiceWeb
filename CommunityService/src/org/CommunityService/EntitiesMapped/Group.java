package org.CommunityService.EntitiesMapped;

// Generated Feb 22, 2014 8:45:42 PM by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;

import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.CascadeType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * Group generated by hbm2java
 */
@Entity
@Table(name = "Group", catalog = "volunteerMeData", uniqueConstraints = @UniqueConstraint(columnNames = "GroupName"))
public class Group implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 6656613664581918523L;
	private Integer groupId;
	private String groupName;
	private Integer hoursWorked;
	private Float points;
	private Float avgRatingOfVolunteers;
	private Date creationDate;
	private Set<Organization> organizations = new HashSet<Organization>(0);
	private Set<Picture> pictures = new HashSet<Picture>(0);
	private Set<GroupMember> groupMembers = new HashSet<GroupMember>(0);

	public Group() {
	}

	public Group(String groupName) {
		this.groupName = groupName;
	}

	public Group(String groupName, Integer hoursWorked, Float points, Float avgRatingOfVolunteers, Date creationDate, Set<Organization> organizations,
			Set<Picture> pictures, Set<GroupMember> groupMembers) {
		this.groupName = groupName;
		this.hoursWorked = hoursWorked;
		this.points = points;
		this.avgRatingOfVolunteers = avgRatingOfVolunteers;
		this.creationDate = creationDate;
		this.organizations = organizations;
		this.pictures = pictures;
		this.groupMembers = groupMembers;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "GroupID", unique = true, nullable = false)
	public Integer getGroupId() {
		return this.groupId;
	}

	public void setGroupId(Integer groupId) {
		this.groupId = groupId;
	}

	@Column(name = "GroupName", unique = true, nullable = false, length = 45)
	public String getGroupName() {
		return this.groupName;
	}

	public void setGroupName(String groupName) {
		this.groupName = groupName;
	}

	@Column(name = "HoursWorked")
	public Integer getHoursWorked() {
		return this.hoursWorked;
	}

	public void setHoursWorked(Integer hoursWorked) {
		this.hoursWorked = hoursWorked;
	}

	@Column(name = "Points", precision = 12, scale = 0)
	public Float getPoints() {
		return this.points;
	}

	public void setPoints(Float points) {
		this.points = points;
	}

	@Column(name = "AvgRatingOfVolunteers", precision = 12, scale = 0)
	public Float getAvgRatingOfVolunteers() {
		return this.avgRatingOfVolunteers;
	}

	public void setAvgRatingOfVolunteers(Float avgRatingOfVolunteers) {
		this.avgRatingOfVolunteers = avgRatingOfVolunteers;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CreationDate", length = 19)
	public Date getCreationDate() {
		return this.creationDate;
	}

	public void setCreationDate(Date creationDate) {
		this.creationDate = creationDate;
	}

	@ManyToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
	@JoinTable(name = "Organization_Group", catalog = "volunteerMeData", joinColumns = { @JoinColumn(name = "GroupID", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "OrgID", nullable = false, updatable = false) })
	public Set<Organization> getOrganizations() {
		return this.organizations;
	}

	public void setOrganizations(Set<Organization> organizations) {
		this.organizations = organizations;
	}

	@ManyToMany(fetch = FetchType.LAZY, mappedBy = "groups", cascade = CascadeType.ALL)
	public Set<Picture> getPictures() {
		return this.pictures;
	}

	public void setPictures(Set<Picture> pictures) {
		this.pictures = pictures;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "group", cascade = CascadeType.ALL, orphanRemoval = true)
	public Set<GroupMember> getGroupMembers() {
		return this.groupMembers;
	}

	public void setGroupMembers(Set<GroupMember> groupMembers) {
		this.groupMembers = groupMembers;
	}

}
