package org.CommunityService.EntitiesMapped;

// Generated Feb 10, 2014 10:56:44 AM by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * Organization generated by hbm2java
 */
@Entity
@Table(name = "Organization", catalog = "dbAppData", uniqueConstraints = { @UniqueConstraint(columnNames = "OrgName"),
		@UniqueConstraint(columnNames = "Address"), @UniqueConstraint(columnNames = "PhoneNumber"),
		@UniqueConstraint(columnNames = "Admin") })
public class Organization implements java.io.Serializable {

	private Integer orgId;
	private String orgName;
	private String address;
	private String phoneNumber;
	private String emailAddress;
	private String description;
	private Date createdOn;
	private int admin;
	private Set<Group> groups = new HashSet<Group>(0);
	private Set<OrganizationFollower> organizationFollowers = new HashSet<OrganizationFollower>(0);
	private Set<Picture> pictures = new HashSet<Picture>(0);
	private Set<Volunteer> volunteers = new HashSet<Volunteer>(0);
	private Set<Volunteer> volunteers_1 = new HashSet<Volunteer>(0);

	public Organization() {
	}

	public Organization(String orgName, String address, String phoneNumber, String emailAddress, int admin) {
		this.orgName = orgName;
		this.address = address;
		this.phoneNumber = phoneNumber;
		this.emailAddress = emailAddress;
		this.admin = admin;
	}

	public Organization(String orgName, String address, String phoneNumber, String emailAddress, String description,
			Date createdOn, int admin, Set<Group> groups, Set<OrganizationFollower> organizationFollowers,
			Set<Picture> pictures, Set<Volunteer> volunteers, Set<Volunteer> volunteers_1) {
		this.orgName = orgName;
		this.address = address;
		this.phoneNumber = phoneNumber;
		this.emailAddress = emailAddress;
		this.description = description;
		this.createdOn = createdOn;
		this.admin = admin;
		this.groups = groups;
		this.organizationFollowers = organizationFollowers;
		this.pictures = pictures;
		this.volunteers = volunteers;
		this.volunteers_1 = volunteers_1;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "OrgID", unique = true, nullable = false)
	public Integer getOrgId() {
		return this.orgId;
	}

	public void setOrgId(Integer orgId) {
		this.orgId = orgId;
	}

	@Column(name = "OrgName", unique = true, nullable = false, length = 60)
	public String getOrgName() {
		return this.orgName;
	}

	public void setOrgName(String orgName) {
		this.orgName = orgName;
	}

	@Column(name = "Address", unique = true, nullable = false, length = 45)
	public String getAddress() {
		return this.address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	@Column(name = "PhoneNumber", unique = true, nullable = false, length = 45)
	public String getPhoneNumber() {
		return this.phoneNumber;
	}

	public void setPhoneNumber(String phoneNumber) {
		this.phoneNumber = phoneNumber;
	}

	@Column(name = "EmailAddress", nullable = false, length = 45)
	public String getEmailAddress() {
		return this.emailAddress;
	}

	public void setEmailAddress(String emailAddress) {
		this.emailAddress = emailAddress;
	}

	@Column(name = "Description")
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CreatedOn", length = 19)
	public Date getCreatedOn() {
		return this.createdOn;
	}

	public void setCreatedOn(Date createdOn) {
		this.createdOn = createdOn;
	}

	@Column(name = "Admin", unique = true, nullable = false)
	public int getAdmin() {
		return this.admin;
	}

	public void setAdmin(int admin) {
		this.admin = admin;
	}

	@ManyToMany(fetch = FetchType.LAZY, mappedBy = "organizations")
	public Set<Group> getGroups() {
		return this.groups;
	}

	public void setGroups(Set<Group> groups) {
		this.groups = groups;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "organization")
	public Set<OrganizationFollower> getOrganizationFollowers() {
		return this.organizationFollowers;
	}

	public void setOrganizationFollowers(Set<OrganizationFollower> organizationFollowers) {
		this.organizationFollowers = organizationFollowers;
	}

	@ManyToMany(fetch = FetchType.LAZY, mappedBy = "organizations")
	public Set<Picture> getPictures() {
		return this.pictures;
	}

	public void setPictures(Set<Picture> pictures) {
		this.pictures = pictures;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "organization")
	public Set<Volunteer> getVolunteers() {
		return this.volunteers;
	}

	public void setVolunteers(Set<Volunteer> volunteers) {
		this.volunteers = volunteers;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "Organization_Moderators", catalog = "dbAppData", joinColumns = { @JoinColumn(name = "OrgID", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "VolunteerID", nullable = false, updatable = false) })
	public Set<Volunteer> getVolunteers_1() {
		return this.volunteers_1;
	}

	public void setVolunteers_1(Set<Volunteer> volunteers_1) {
		this.volunteers_1 = volunteers_1;
	}

}
