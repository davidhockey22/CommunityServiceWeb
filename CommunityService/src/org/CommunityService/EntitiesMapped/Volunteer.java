package org.CommunityService.EntitiesMapped;

// Generated Feb 22, 2014 8:45:42 PM by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;

import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.CascadeType;
import javax.persistence.Id;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * Volunteer generated by hbm2java
 */
@Entity
@Table(name = "Volunteer", catalog = "volunteerMeData", uniqueConstraints = { @UniqueConstraint(columnNames = "EmailAddress"),
		@UniqueConstraint(columnNames = "VolunteerName") })
public class Volunteer implements java.io.Serializable {

	private static final long serialVersionUID = 1L;
	/**
	 * 
	 */
	private Integer volunteerId;
	private String volunteerName;
	private String volunteerPassword;
	private String phoneNumber;
	private String emailAddress;
	private Date lastLoginDate;
	private Float points;
	private Integer hoursWorked;
	private Float avgRating;
	private Date creationDate;
	private Date activationDate;
	private String firstName;
	private String lastName;
	private String description;
	private String salt;

	private Set<GroupMember> groupMembers = new HashSet<GroupMember>(0);
	private Set<FacebookLogIn> facebookLogIns = new HashSet<FacebookLogIn>(0);
	private Set<EventVolunteer> eventVolunteers = new HashSet<EventVolunteer>(0);
	private Set<Picture> pictures = new HashSet<Picture>(0);
	private Set<VolunteerInterest> volunteerInterests = new HashSet<VolunteerInterest>(0);
	private Set<OrganizationFollower> organizationFollowers = new HashSet<OrganizationFollower>(0);
	private Set<VolunteerDevice> volunteerDevices = new HashSet<VolunteerDevice>(0);
	private Set<GoogleLogIn> googleLogIns = new HashSet<GoogleLogIn>(0);
	private Set<VolunteerSkill> volunteerSkills = new HashSet<VolunteerSkill>(0);
	private Set<SocialLinks> socialLinkses = new HashSet<SocialLinks>(0);
	private Set<Notification> notifications = new HashSet<Notification>(0);

	public Volunteer() {
	}

	public Volunteer(String volunteerName, String volunteerPassword, String phoneNumber, String emailAddress, String firstName, String lastName) {
		this.volunteerName = volunteerName;
		this.volunteerPassword = volunteerPassword;
		this.phoneNumber = phoneNumber;
		this.emailAddress = emailAddress;
		this.firstName = firstName;
		this.lastName = lastName;
	}

	public Volunteer(String volunteerName, String volunteerPassword, String phoneNumber, String emailAddress, Date lastLoginDate, Float points,
			Integer hoursWorked, Float avgRating, Date creationDate, Date activationDate, String firstName, String lastName, String description,
			Set<GroupMember> groupMembers, Set<FacebookLogIn> facebookLogIns, Set<EventVolunteer> eventVolunteers, Set<Picture> pictures,
			Set<VolunteerInterest> volunteerInterests, Set<OrganizationFollower> organizationFollowers, Set<VolunteerDevice> volunteerDevices,
			Set<GoogleLogIn> googleLogIns, Set<VolunteerSkill> volunteerSkills, Set<SocialLinks> socialLinkses, Set<Notification> notifications) {
		this.volunteerName = volunteerName;
		this.volunteerPassword = volunteerPassword;
		this.phoneNumber = phoneNumber;
		this.emailAddress = emailAddress;
		this.lastLoginDate = lastLoginDate;
		this.points = points;
		this.hoursWorked = hoursWorked;
		this.avgRating = avgRating;
		this.creationDate = creationDate;
		this.activationDate = activationDate;
		this.firstName = firstName;
		this.lastName = lastName;
		this.description = description;
		this.groupMembers = groupMembers;
		this.facebookLogIns = facebookLogIns;
		this.eventVolunteers = eventVolunteers;
		this.pictures = pictures;
		this.volunteerInterests = volunteerInterests;
		this.organizationFollowers = organizationFollowers;
		this.volunteerDevices = volunteerDevices;
		this.googleLogIns = googleLogIns;
		this.volunteerSkills = volunteerSkills;
		this.socialLinkses = socialLinkses;
		this.notifications = notifications;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "VolunteerID", unique = true, nullable = false)
	public Integer getVolunteerId() {
		return this.volunteerId;
	}

	public void setVolunteerId(Integer volunteerId) {
		this.volunteerId = volunteerId;
	}

	@Column(name = "VolunteerName", unique = true, nullable = false, length = 20)
	public String getVolunteerName() {
		return this.volunteerName;
	}

	public void setVolunteerName(String volunteerName) {
		this.volunteerName = volunteerName;
	}

	@Column(name = "VolunteerPassword", nullable = false, length = 200)
	public String getVolunteerPassword() {
		return this.volunteerPassword;
	}

	public void setVolunteerPassword(String volunteerPassword) {
		this.volunteerPassword = volunteerPassword;
	}

	@Column(name = "PhoneNumber", nullable = false, length = 20)
	public String getPhoneNumber() {
		return this.phoneNumber;
	}

	public void setPhoneNumber(String phoneNumber) {
		this.phoneNumber = phoneNumber;
	}

	@Column(name = "EmailAddress", unique = true, nullable = false, length = 254)
	public String getEmailAddress() {
		return this.emailAddress;
	}

	public void setEmailAddress(String emailAddress) {
		this.emailAddress = emailAddress;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "LastLoginDate", length = 19)
	public Date getLastLoginDate() {
		return this.lastLoginDate;
	}

	public void setLastLoginDate(Date lastLoginDate) {
		this.lastLoginDate = lastLoginDate;
	}

	@Column(name = "Points", precision = 12, scale = 0, insertable=false)
	public Float getPoints() {
		return this.points;
	}

	public void setPoints(Float points) {
		this.points = points;
	}

	@Column(name = "HoursWorked")
	public Integer getHoursWorked() {
		return this.hoursWorked;
	}

	public void setHoursWorked(Integer hoursWorked) {
		this.hoursWorked = hoursWorked;
	}

	@Column(name = "AvgRating", precision = 12, scale = 0)
	public Float getAvgRating() {
		return this.avgRating;
	}

	public void setAvgRating(Float avgRating) {
		this.avgRating = avgRating;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CreationDate", length = 19)
	public Date getCreationDate() {
		return this.creationDate;
	}

	public void setCreationDate(Date creationDate) {
		this.creationDate = creationDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "ActivationDate", length = 19)
	public Date getActivationDate() {
		return this.activationDate;
	}

	public void setActivationDate(Date activationDate) {
		this.activationDate = activationDate;
	}

	@Column(name = "FirstName", nullable = false, length = 45)
	public String getFirstName() {
		return this.firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	@Column(name = "LastName", nullable = false, length = 45)
	public String getLastName() {
		return this.lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	@Column(name = "Description", length = 500)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "Salt", length = 254)
	public String getSalt() {
		return this.salt;
	}

	public void setSalt(String salt) {
		this.salt = salt;
	}
	
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "volunteer", cascade = CascadeType.ALL)
	public Set<GroupMember> getGroupMembers() {
		return this.groupMembers;
	}

	public void setGroupMembers(Set<GroupMember> groupMembers) {
		this.groupMembers = groupMembers;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "volunteer", cascade = CascadeType.ALL)
	public Set<FacebookLogIn> getFacebookLogIns() {
		return this.facebookLogIns;
	}

	public void setFacebookLogIns(Set<FacebookLogIn> facebookLogIns) {
		this.facebookLogIns = facebookLogIns;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "volunteer", cascade = CascadeType.ALL, orphanRemoval = true)
	public Set<EventVolunteer> getEventVolunteers() {
		return this.eventVolunteers;
	}

	public void setEventVolunteers(Set<EventVolunteer> eventVolunteers) {
		this.eventVolunteers = eventVolunteers;
	}

	@ManyToMany(fetch = FetchType.LAZY, mappedBy = "volunteers", cascade = CascadeType.ALL)
	public Set<Picture> getPictures() {
		return this.pictures;
	}

	public void setPictures(Set<Picture> pictures) {
		this.pictures = pictures;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "volunteer", cascade = CascadeType.ALL, orphanRemoval = true)
	public Set<VolunteerInterest> getVolunteerInterests() {
		return this.volunteerInterests;
	}

	public void setVolunteerInterests(Set<VolunteerInterest> volunteerInterests) {
		this.volunteerInterests = volunteerInterests;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "volunteer", cascade = CascadeType.ALL, orphanRemoval = true)
	public Set<OrganizationFollower> getOrganizationFollowers() {
		return this.organizationFollowers;
	}

	public void setOrganizationFollowers(Set<OrganizationFollower> organizationFollowers) {
		this.organizationFollowers = organizationFollowers;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "volunteer", cascade = CascadeType.ALL)
	public Set<VolunteerDevice> getVolunteerDevices() {
		return this.volunteerDevices;
	}

	public void setVolunteerDevices(Set<VolunteerDevice> volunteerDevices) {
		this.volunteerDevices = volunteerDevices;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "volunteer", cascade = CascadeType.ALL)
	public Set<GoogleLogIn> getGoogleLogIns() {
		return this.googleLogIns;
	}

	public void setGoogleLogIns(Set<GoogleLogIn> googleLogIns) {
		this.googleLogIns = googleLogIns;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "volunteer", cascade = CascadeType.ALL, orphanRemoval = true)
	public Set<VolunteerSkill> getVolunteerSkills() {
		return this.volunteerSkills;
	}

	public void setVolunteerSkills(Set<VolunteerSkill> volunteerSkills) {
		this.volunteerSkills = volunteerSkills;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "volunteer", cascade = CascadeType.ALL)
	public Set<SocialLinks> getSocialLinkses() {
		return this.socialLinkses;
	}

	public void setSocialLinkses(Set<SocialLinks> socialLinkses) {
		this.socialLinkses = socialLinkses;
	}

	@ManyToMany(fetch = FetchType.LAZY, mappedBy = "volunteers")
	public Set<Notification> getNotifications() {
		return this.notifications;
	}

	public void setNotifications(Set<Notification> notifications) {
		this.notifications = notifications;
	}

}
